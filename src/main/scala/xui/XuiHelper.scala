package xui

object XuiHelper {

  val xuiUrl = "https://manage-case.#{env}.platform.hmcts.net"
  val IdamUrl = "https://idam-web-public.#{env}.platform.hmcts.net"

  /*====================================================================================
  * Manage Case Homepage
  *===================================================================================*/

  val Homepage = {

    exec(flushHttpCache)
    .exec(flushCookieJar)

    .group("XUI_000_Homepage") {
      exec(http("XUI_Homepage_HomepageRequest")
        .get(xuiUrl)
        .headers(Headers.navigationHeader)
        .header("sec-fetch-site", "none"))

      .exec(http("XUI_Homepage_ConfigurationUI")
        .get(xuiUrl + "/external/configuration-ui/")
        .headers(Headers.commonHeader)
        .header("accept", "*/*")
        .check(substring("ccdGatewayUrl")))

      .exec(http("XUI_Homepage_ConfigJson")
        .get(xuiUrl + "/assets/config/config.json")
        .header("accept", "application/json, text/plain, */*")
        .check(substring("caseEditorConfig")))

      .exec(http("XUI_Homepage_TsAndCs")
        .get(xuiUrl + "/api/configuration?configurationKey=termsAndConditionsEnabled")
        .headers(Headers.commonHeader)
        .header("accept", "application/json, text/plain, */*")
        .check(substring("false")))

      .exec(http("XUI_Homepage_ConfigUI")
        .get(xuiUrl + "/external/config/ui")
        .headers(Headers.commonHeader)
        .header("accept", "application/json, text/plain, */*")
        .check(substring("ccdGatewayUrl")))

      .exec(http("XUI_Homepage_UserDetails")
        .get(xuiUrl + "/api/user/details?refreshRoleAssignments=undefined")
        .headers(Headers.commonHeader)
        .header("accept", "application/json, text/plain, */*")
        .check(status.in(200, 304, 401)))

      .exec(http("XUI_Homepage_IsAuthenticated")
        .get(xuiUrl + "/auth/isAuthenticated")
        .headers(Headers.commonHeader)
        .header("accept", "application/json, text/plain, */*")
        .check(regex("true|false")))

      .exec(http("XUI_Homepage_AuthLogin")
        .get(xuiUrl + "/auth/login")
        .headers(Headers.navigationHeader)
        .check(css("input[name='_csrf']", "value").saveAs("csrf"))
        .check(regex("/oauth2/callback&amp;state=(.*)&amp;nonce=").saveAs("state"))
        .check(regex("nonce=(.*)&amp;response_type").saveAs("nonce")))

      .exitHereIfFailed
    }

    //Nov 2023: required to capture the xui-webapp cookie and feed it back in after login. We were facing an issue whereby after the first login,
    //subsequent logins were generating a new xui-webapp cookie during the login (rather than using the existing one generated by auth/login),
    //and this was causing issues when making subsequent requests to get jurisdictions, work-basket-inputs, etc, throwing a 401.
    .exec(getCookieValue(CookieKey("xui-webapp").withDomain(xuiUrl.replace("https://", "")).saveAs("xuiWebAppCookie")))
  }

  /*====================================================================================
  * Manage Case Login
  *===================================================================================*/

  def Login(email: String, password: String) = {

    exitblockonfail {
      group("XUI_000_Login") {
        exec(http("XUI_Login_LoginRequest")
          .post(IdamUrl + "/login?client_id=xuiwebapp&redirect_uri=" + xuiUrl + "/oauth2/callback&state=#{state}&nonce=#{nonce}&response_type=code&scope=profile%20openid%20roles%20manage-user%20create-user%20search-user&prompt=")
          .formParam("username", s"${email}")
          .formParam("password", s"${password}")
          .formParam("azureLoginEnabled", "true")
          .formParam("mojLoginEnabled", "true")
          .formParam("selfRegistrationEnabled", "false")
          .formParam("_csrf", "#{csrf}")
          .headers(Headers.navigationHeader)
          .headers(Headers.postHeader)
          .check(regex("Manage cases")))

        //see xui-webapp cookie capture in the Homepage scenario for details of why this is being used
        .exec(addCookie(Cookie("xui-webapp", "#{xuiWebAppCookie}")
          .withMaxAge(28800)
          .withSecure(true)))

        .exec(http("XUI_Login_ConfigurationUI")
          .get(xuiUrl + "/external/configuration-ui/")
          .headers(Headers.commonHeader)
          .header("accept", "*/*")
          .check(substring("ccdGatewayUrl")))

        .exec(http("XUI_Login_ConfigJson")
          .get(xuiUrl + "/assets/config/config.json")
          .header("accept", "application/json, text/plain, */*")
          .check(substring("caseEditorConfig")))

        .exec(http("XUI_Login_TsAndCs")
          .get(xuiUrl + "/api/configuration?configurationKey=termsAndConditionsEnabled")
          .headers(Headers.commonHeader)
          .header("accept", "application/json, text/plain, */*")
          .check(substring("false")))

        .exec(http("XUI_Login_ConfigUI")
          .get(xuiUrl + "/external/config/ui")
          .headers(Headers.commonHeader)
          .header("accept", "application/json, text/plain, */*")
          .check(substring("ccdGatewayUrl")))

        .exec(http("XUI_Login_UserDetails")
          .get(xuiUrl + "/api/user/details?refreshRoleAssignments=undefined")
          .headers(Headers.commonHeader)
          .header("accept", "application/json, text/plain, */*")
          .check(status.in(200, 304)))

        .exec(http("XUI_Login_IsAuthenticated")
          .get(xuiUrl + "/auth/isAuthenticated")
          .headers(Headers.commonHeader)
          .header("accept", "application/json, text/plain, */*")
          .check(regex("true|false")))

        .exec(http("XUI_Login_MonitoringTools")
          .get(xuiUrl + "/api/monitoring-tools")
          .headers(Headers.commonHeader)
          .header("accept", "application/json, text/plain, */*")
          .check(jsonPath("$.key").notNull))

        .exec(http("XUI_Login_Jurisdictions")
          .get(xuiUrl + "/aggregated/caseworkers/:uid/jurisdictions?access=read")
          .headers(Headers.commonHeader)
          .header("accept", "application/json")
          .check(substring("id")))

        .exec(http("XUI_Login_OrgDetails")
          .get(xuiUrl + "/api/organisation")
          .headers(Headers.commonHeader)
          .header("accept", "application/json, text/plain, */*")
          .check(regex("name|Organisation route error"))
          .check(status.in(200, 304, 401, 403)))

        .exec(http("XUI_Login_WorkBasketInputs")
          .get(xuiUrl + "/data/internal/case-types/#{caseType}/work-basket-inputs")
          .headers(Headers.commonHeader)
          .header("accept", "application/vnd.uk.gov.hmcts.ccd-data-store-api.ui-workbasket-input-details.v2+json;charset=UTF-8")
          .check(regex("workbasketInputs|Not Found"))
          .check(status.in(200, 404)))

        .exec(http("XUI_Login_SearchCases")
          .post(xuiUrl + "/data/internal/searchCases?ctid=#{caseType}&use_case=WORKBASKET&view=WORKBASKET&page=1")
          .headers(Headers.commonHeader)
          .header("accept", "application/json")
          .formParam("x-xsrf-token", "#{XSRFToken}")
          .body(StringBody("""{"size":25}"""))
          .check(substring("columns")))

        .exitHereIfFailed
      }
    }
  }

  /*====================================================================================
  * Manage Case Logout
  *===================================================================================*/

  val Logout =

    group("XUI_000_Logout") {
      exec(http("XUI_Logout_LogoutRequest")
        .get(xuiUrl + "/auth/logout")
        .headers(Headers.navigationHeader))
    }
}