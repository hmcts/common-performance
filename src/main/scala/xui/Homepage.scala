package xui

import io.gatling.core.Predef._
import io.gatling.http.Predef._

object Homepage {

  val xuiUrl = "https://manage-case.#{env}.platform.hmcts.net"

  /*====================================================================================
  * Manage Case Homepage
  *===================================================================================*/

  val XUIHomePage =

    exec(flushHttpCache)
    .exec(flushCookieJar)

    .group("XUI_Homepage") {
      exec(http("XUI_Homepage_HomepageGet")
        .get(xuiUrl)
        .headers(Headers.navigationHeader)
        .header("sec-fetch-site", "none"))

      .exec(http("XUI_Homepage_ConfigurationUI")
        .get(xuiUrl + "/external/configuration-ui/")
        .headers(Headers.commonHeader)
        .header("accept", "*/*")
        .check(substring("ccdGatewayUrl")))

      .exec(http("XUI_Homepage_ConfigJson")
        .get(xuiUrl + "/assets/config/config.json")
        .header("accept", "application/json, text/plain, */*")
        .check(substring("caseEditorConfig")))

      .exec(http("XUI_Homepage_TsAndCs")
        .get(xuiUrl + "/api/configuration?configurationKey=termsAndConditionsEnabled")
        .headers(Headers.commonHeader)
        .header("accept", "application/json, text/plain, */*")
        .check(substring("false")))

      .exec(http("XUI_Homepage_ConfigUI")
        .get(xuiUrl + "/external/config/ui")
        .headers(Headers.commonHeader)
        .header("accept", "application/json, text/plain, */*")
        .check(substring("ccdGatewayUrl")))

      .exec(http("XUI_Homepage_UserDetails")
        .get(xuiUrl + "/api/user/details?refreshRoleAssignments=undefined")
        .headers(Headers.commonHeader)
        .header("accept", "application/json, text/plain, */*")
        .check(status.in(200, 304, 401)))

      .exec(http("XUI_Homepage_IsAuthenticated")
        .get(xuiUrl + "/auth/isAuthenticated")
        .headers(Headers.commonHeader)
        .header("accept", "application/json, text/plain, */*")
        .check(regex("true|false")))

      .exec(http("XUI_Homepage_AuthLogin")
        .get(xuiUrl + "/auth/login")
        .headers(Headers.navigationHeader)
        .check(css("input[name='_csrf']", "value").saveAs("csrf"))
        .check(regex("/oauth2/callback&amp;state=(.*)&amp;nonce=").saveAs("state"))
        .check(regex("nonce=(.*)&amp;response_type").saveAs("nonce")))
    }

    //Nov 2023: required to capture the xui-webapp cookie and feed it back in after login. We were facing an issue whereby after the first login,
    //subsequent logins were generating a new xui-webapp cookie during the login (rather than using the existing one generated by auth/login),
    //and this was causing issues when making subsequent requests to get jurisdictions, work-basket-inputs, etc, throwing a 401.
    .exec(getCookieValue(CookieKey("xui-webapp").withDomain(xuiUrl.replace("https://", "")).saveAs("xuiWebAppCookie")))
}